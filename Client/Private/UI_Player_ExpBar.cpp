#include "stdafx.h"
#include "UI_Player_ExpBar.h"
#include "GameInstance.h"
#include "Json_Utility.h"
#include "Data_Manager.h"

CUI_Player_ExpBar::CUI_Player_ExpBar(ID3D11Device* pDevice, ID3D11DeviceContext* pContext, const wstring& strPrototypeTag)
	:CUI(pDevice, pContext, strPrototypeTag)
{

}

CUI_Player_ExpBar::CUI_Player_ExpBar(const CUI_Player_ExpBar& rhs)
	: CUI(rhs)
{
}

HRESULT CUI_Player_ExpBar::Initialize_Prototype()
{
	//TODO 원형객체의 초기화과정을 수행한다.
	/* 1.서버로부터 값을 받아와서 초기화한다 .*/
	/* 2.파일입출력을 통해 값을 받아온다.*/

	return S_OK;
}

HRESULT CUI_Player_ExpBar::Initialize(void* pArg)
{
	if (pArg != nullptr)
		m_tUIInfo = *(UI_DESC*)pArg;

	m_tUIInfo.fScaleX = 169.f;
	m_tUIInfo.fScaleY = 4.f;

	if (FAILED(Ready_Components()))
		return E_FAIL;

	if (FAILED(__super::Initialize(&m_tUIInfo))) //!  트랜스폼 셋팅, m_tUIInfo의 bWorldUI 가 false 인 경우에만 직교위치 셋팅
		return E_FAIL;

	Check_RectPos();
	m_fOrigin_Right = (_float)m_rcUI.right;

	Set_OwnerExp();

	m_iShaderNum = 2;

	m_pDataManager = CData_Manager::GetInstance();

	return S_OK;
}

void CUI_Player_ExpBar::Priority_Tick(_float fTimeDelta)
{

}

void CUI_Player_ExpBar::Tick(_float fTimeDelta)
{
	__super::Tick(fTimeDelta);
	
	if (m_pGameInstance->Key_Down(DIK_P))
	{
		m_pDataManager->Add_CurEXP(10.f);
	}

	if (m_pGameInstance->Key_Down(DIK_O))
	{
		m_pDataManager->Add_CurEXP(100.f);
	}

	if (m_pGameInstance->Key_Down(DIK_PGDN))
	{
		//Change_SizeRight(-5.f);
		--m_iShaderNum;
		if (m_iShaderNum <= 0)
			m_iShaderNum = 0;
	}

	if (m_pGameInstance->Key_Down(DIK_PGUP))
	{
		//Change_SizeRight(5.f);
		++m_iShaderNum;
		if (m_iShaderNum >= 3)
			m_iShaderNum = 2;																	// 셰이더 패스 최대 번호 제한 (나중에 수정)
	}

	if (m_fPreEXP > m_pDataManager->Get_MaxEXP())
	{
		m_pDataManager->Add_CurLevel(1);
		
		m_fPreEXP = m_pDataManager->Get_CurEXP();
	}

	// Level변동이 없을 경우
	if (m_iPreLevel == m_pDataManager->Get_CurLevel()/*m_pPlayer->Get_Stat().iLevel*/)
	{
		// 시간 중첩
		m_fTimeAcc += fTimeDelta * 0.5f;
		// 현재 Exp를 받아온다. (키입력으로 Test중)
		//m_fCurEXP = m_fTestPlusEXP/*_float(m_pPlayer->Get_Stat().iExp)*/;

		// 현재 EXP가 PreEXP보다 높아지면
		if (m_pDataManager->Get_CurEXP() > m_fPreEXP)
			m_bLerp = false;	// 러프 중지

		// CurEXP가 PreEXP보다 커져서 러프까지 중지됐을 경우
		if (false == m_bLerp && m_fPreEXP < m_pDataManager->Get_CurEXP())
		{
			// 바 길이를 Ratio로 계산 (0~1)
			_float m_fRatio = m_pDataManager->Get_CurEXP() / m_pDataManager->Get_MaxEXP();

			// PreEXP에 중첩된 시간을 더해준다.
			m_fPreEXP += m_fTimeAcc;

			// 바 길이를 PreEXP로 계산 (0~1)
			m_fProgress = m_fPreEXP / m_pDataManager->Get_MaxEXP();

			// =>PreEXP가 Cur랑 같거나 커졌다면 통과해서, 현재 EXP로 바 길이를 측정 후 출력. =>PreEXP가 Cur보다 아직 낮다면 PreEXP로 바 길이를 출력
			if (m_fPreEXP >= m_pDataManager->Get_CurEXP())
			{
				m_fTimeAcc = 0.f; // 누적 시간값 초기화 (PreEXP가 CurEXP값과 같아질때까지 보간되는 값)
				m_fPreEXP = m_pDataManager->Get_CurEXP();	// PreEXP를 CurEXP로 맞춰준다.
				m_fProgress = m_fRatio; // 바 길이를 CurEXP로 맞춰준다.
				m_bLerp = true;	// Lerp를 다시 켜준다.
			}
		}
	}
	else if (m_iPreLevel < m_pDataManager->Get_CurLevel()/*m_pPlayer->Get_Stat().iLevel*/)
	{
		// EXPBar가 저장했던 Level이 Player의 현재 레벨과 다를 때 (작을 때)
		m_fTimeAcc += fTimeDelta * 0.5f;
		m_fPreEXP += m_fTimeAcc;

		if (m_fPreEXP >= m_pDataManager->Get_MaxEXP())
		{
			m_fRemainEXP = m_fPreEXP - m_pDataManager->Get_MaxEXP(); // 레벨업시 초과된 값 저장
			m_fPreEXP = m_pDataManager->Get_MaxEXP();
		}

		m_fProgress = m_fPreEXP / m_pDataManager->Get_MaxEXP();

		if (m_fProgress >= 1.f) // 바가 다 차면 정보를 갱신
		{
			m_iPreLevel = m_pDataManager->Get_CurLevel();/*m_pPlayer->Get_Stat().iLevel*/;
			m_pDataManager->NextLevl_MaxEXP(); /*m_pPlayer->Get_Stat().iMaxExp*/;
			m_pDataManager->Set_CurEXP(m_fRemainEXP);/*m_pPlayer->Get_Stat().iExp*/; // 레벨업하고 남은 값
			m_fPreEXP = 0.f; // PreEXP는 초기화
			m_pData_Manager->Set_ShowLevelBox(true);

			m_fTimeAcc = 0.f;
			m_bLerp = true;
		}
	}
}

void CUI_Player_ExpBar::Late_Tick(_float fTimeDelta)
{
	//if (m_tUIInfo.bWorldUI == true)
	//	Compute_OwnerCamDistance();


	if (FAILED(m_pGameInstance->Add_RenderGroup(CRenderer::RENDER_UI, this)))
		return;
}

HRESULT CUI_Player_ExpBar::Render()
{
	if (FAILED(Bind_ShaderResources()))
		return E_FAIL;

	//! 이 셰이더에 0번째 패스로 그린다.
	m_pShaderCom->Begin(m_iShaderNum); //! Shader_PosTex 7번 패스 = VS_MAIN,  PS_UI_HP

	//! 내가 그리려고 하는 정점, 인덱스 버퍼를 장치에 바인딩해
	m_pVIBufferCom->Bind_VIBuffers();

	//! 바인딩된 정점, 인덱스를 그려
	m_pVIBufferCom->Render();

	return S_OK;
}

HRESULT CUI_Player_ExpBar::Ready_Components()
{
	FAILED_CHECK(__super::Ready_Components()); // Ready : Texture / MapTexture

	//! For.Com_Texture1 // 경험치 바
	if (FAILED(__super::Add_Component(LEVEL_STATIC, TEXT("ui_element_exp_bar"),
		TEXT("Com_Texture_ExpBar"), reinterpret_cast<CComponent**>(&m_pTextureCom[EXPBAR]))))
		return E_FAIL;

	//! For.Com_Shader
	if (FAILED(__super::Add_Component(LEVEL_STATIC, TEXT("Prototype_Component_Shader_UI"),
		TEXT("Com_Shader"), reinterpret_cast<CComponent**>(&m_pShaderCom))))
		return E_FAIL;

	//! For.Com_VIBuffer
	if (FAILED(__super::Add_Component(LEVEL_STATIC, TEXT("Prototype_Component_VIBuffer_Rect"),
		TEXT("Com_VIBuffer"), reinterpret_cast<CComponent**>(&m_pVIBufferCom))))
		return E_FAIL;

	/* 효과가 필요한 녀석은 Map텍스쳐도 추가해주기 */
	return S_OK;
}

HRESULT CUI_Player_ExpBar::Bind_ShaderResources()
{
	if (FAILED(m_pTransformCom->Bind_ShaderResource(m_pShaderCom, "g_WorldMatrix")))
		return E_FAIL;
	if (FAILED(m_pShaderCom->Bind_Matrix("g_ViewMatrix", &m_ViewMatrix)))
		return E_FAIL;
	if (FAILED(m_pShaderCom->Bind_Matrix("g_ProjMatrix", &m_ProjMatrix)))
		return E_FAIL;

	if (FAILED(m_pShaderCom->Bind_RawValue("g_Alpha", &m_fAlpha, sizeof(_float))))
		return E_FAIL;

	if (FAILED(m_pTextureCom[EXPBAR]->Bind_ShaderResource(m_pShaderCom, "g_DiffuseTexture")))
		return E_FAIL;
	if (FAILED(m_pShaderCom->Bind_RawValue("g_LoadingProgress", &m_fProgress, sizeof(_float))))
		return E_FAIL;

	return S_OK;
}

void CUI_Player_ExpBar::Compute_OwnerCamDistance()
{
	//_vector		vPosition = m_tUIInfo.pOwnerTransform->Get_State(CTransform::STATE_POSITION);
	//_vector		vCamPosition = XMLoadFloat4(&m_pGameInstance->Get_CamPosition());

	//m_fOwnerCamDistance = XMVectorGetX(XMVector3Length(vPosition - vCamPosition));
}

_bool CUI_Player_ExpBar::In_Frustum()
{
	return false;
	//return m_pGameInstance->isIn_WorldPlanes(m_tUIInfo.pOwnerTransform->Get_State(CTransform::STATE_POSITION), 2.f);
}

void CUI_Player_ExpBar::Set_OwnerExp()
{
	m_fMaxEXP = 100.f;
	m_fCurEXP = 00.f;
	m_fPreEXP = m_fCurEXP;
	m_fProgress = 0.f;
}

json CUI_Player_ExpBar::Save_Desc(json& out_json)
{
	/* 기본정보 저장 */
	__super::Save_Desc(out_json);


	/* 추가정보 저장 */


	return out_json;
}

void CUI_Player_ExpBar::Load_Desc()
{

}

CUI_Player_ExpBar* CUI_Player_ExpBar::Create(ID3D11Device* pDevice, ID3D11DeviceContext* pContext, const wstring& strPrototypeTag)
{
	CUI_Player_ExpBar* pInstance = new CUI_Player_ExpBar(pDevice, pContext, strPrototypeTag);

	/* 원형객체를 초기화한다.  */
	if (FAILED(pInstance->Initialize_Prototype()))
	{
		MSG_BOX("Failed to Created : CUI_Player_ExpBar");
		Safe_Release(pInstance);
	}
	return pInstance;
}

CGameObject* CUI_Player_ExpBar::Clone(void* pArg)
{
	CUI_Player_ExpBar* pInstance = new CUI_Player_ExpBar(*this);

	/* 원형객체를 초기화한다.  */
	if (FAILED(pInstance->Initialize(pArg)))
	{
		MSG_BOX("Failed to Cloned : CUI_Player_ExpBar");
		Safe_Release(pInstance);
	}
	return pInstance;
}

CGameObject* CUI_Player_ExpBar::Pool()
{
	return new CUI_Player_ExpBar(*this);
}

void CUI_Player_ExpBar::Free()
{
	__super::Free();

	for (auto& pTexture : m_pTextureCom)
	{
		if (pTexture != nullptr)
			Safe_Release(pTexture);
	}

}
